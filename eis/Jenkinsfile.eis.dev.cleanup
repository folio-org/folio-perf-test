#!groovy

properties([
  parameters([
    string(name: 'EnvName', defaultValue: 'fse-perf-test', description: 'Unique performance environment name'),
    string(name: 'JenkinsAwsCredential', defaultValue: 'aws_folio_devqa', description: 'Jenkins credential to access AWS account'),
    string(name: 'JenkinsEc2Credential', defaultValue: 'ssh_folio_devqa', description: 'Jenkins credential to SSH into AWS EC2'),
    string(name: 'AwsKeyPair', defaultValue: 'folio-devqa', description: 'Aws KeyPair name for EC2 instances'),
    string(name: 'AwsSubnet', defaultValue: 'subnet-0a731725', description: 'AWS Subnet to create EC2 instances'),
    string(name: 'AwsSecurityGroups', defaultValue: 'sg-0aaee57e', description: 'AWS VPC Security Groups to use'),
    string(name: 'AwsUsePublicIp', defaultValue: 'No', description: 'AWS EC2 has public IP or not'),
    string(name: 'MdRepo', defaultValue: 'http://folio-registry.aws.indexdata.com', description: 'Module descriptor repository'),
    string(name: 'StableFolio', defaultValue: 'https://folio-snapshot.aws.indexdata.com', description: 'Use stable version of modules'),
    text(name: 'FixedFolio', defaultValue: '', description: 'Paste install.json content here to use predefined module versions rather than pulling from stable FOLIO site'),
    string(name: 'SampleDataRepo', defaultValue: 'https://s3.amazonaws.com/folio-public-sample-data', description: 'Sample data repository'),
    string(name: 'SampleDataName', defaultValue: 'small', description: 'Sample dataset name'),
  ])
])

def sharedLib
def context

node {
  timeout(60) {

    stage("Checkout") {
      cleanWs()
      checkout scm
      sharedLib = load "shared.groovy"
      context = sharedLib.getContext()
    }

    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${context.awsKeyId}",
      accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
      usernamePassword(credentialsId: 'ebsco-rmapi-up', passwordVariable: 'RMAPI_PASSWORD',
      usernameVariable: 'RMAPI_CUSTID')]) {
      sshagent(credentials:["${context.sshKeyId}"]) {

        stage("Tear down environment") {
          sharedLib.teardownEnv(context)
        }
      }
    }
  }
}
