---
# Ansible playbook that will create a single-node FOLIO AMI image from  'instance_name' 
#
# Example Usage:
#   ansible-playbook -i inventory --vault-password-file ~/.vault_pass.txt \
#        -e "source_ec2_tag=tag_Name_foobar01 ami_name=my-cloned-image-name ami_version=v1.0" \
#        folio-ami-single.yml
     
- hosts: "{{ source_ec2_tag }}"
  remote_user: ubuntu
  become: yes
  become_method: sudo

  pre_tasks:
    - name: include vars for ec2
      include_vars: 
        dir: group_vars/ec2

    - name: Gather ec2_instance_facts
      become: no
      local_action:
        module: ec2_instance_facts
        aws_access_key: "{{ jenkins_aws_access_key }}"
        aws_secret_key: "{{ jenkins_aws_secret_key }}"
        region: "{{ aws_region }}"
        filters:
          "private-ip-address": "{{ ansible_default_ipv4.address }}"
      register: ec2_instance_facts

    - debug:
        msg: "Public IP: {{ ec2_instance_facts.instances.0.public_dns_name }}"
    

  # This tasks are specific to deploying from an AMI
  tasks:
     - name:  disable okapi-deploy from starting at next system boot
       systemd: 
         name: okapi-deploy
         state: stopped 
         enabled: no

     - name: remove old okapi logs
       command: rm -f /var/log/folio/okapi/okapi.log
       args:
         removes: /var/log/folio/okapi/okapi.log

     - name: remove ssh host keys
       shell: shred -u /etc/ssh/*_key /etc/ssh/*_key.pub
       args:
         removes: /etc/ssh/ssh_host_rsa_key

     - name: remove root's public ssh key from image
       shell: shred -u /root/.ssh/authorized_keys
       args:
         removes: /root/.ssh/authorized_keys

     - name: remove root's bash history
       shell: shred -u /root/.bash_history
       args:
         removes: /root/.bash_history

     - name: remove ubuntu's bash history
       shell: shred -u /home/ubuntu/.bash_history
       args:
         removes: /home/ubuntu/.bash_history

     - name: remove ubuntu's public ssh key from image
       shell: shred -u /home/ubuntu/.ssh/authorized_keys
       args:
         removes: /home/ubuntu/.ssh/authorized_keys

     - name: create folio backend AMI
       local_action:
         module: ec2_ami
         name: "{{ ami_name }}-{{ ami_version }}"
         instance_id: "{{ ec2_instance_facts.instances.0.instance_id }}"
         aws_access_key: "{{ jenkins_aws_access_key }}"
         aws_secret_key: "{{ jenkins_aws_secret_key }}"
         region: "{{ aws_region }}"
         tags: '{ "{{ ami_name }}":"{{ ami_version }}"}'
       become: false
        
