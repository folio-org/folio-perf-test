#!groovy

// This Jenkinsfile.integration is used by the Jenkins job "folio-integration"
// and using the FOLIO system built by the cloudformation configuration in this repository "folio-perf-test"
// to then run the integration tests in the repository "folio-integration-tests"
// against the recent set of modules from "folio-snapshot" reference environment.

properties([
  parameters([
    string(name: 'EnvName', defaultValue: 'folio-integration', description: 'Unique environment name'),
    string(name: 'JenkinsAwsCredential', defaultValue: 'jenkins-aws', description: 'Jenkins credential to access AWS account'),
    string(name: 'JenkinsEc2Credential', defaultValue: '11657186-f4d4-4099-ab72-2a32e023cced', description: 'Jenkins credential to SSH into AWS EC2'),
    string(name: 'AwsKeyPair', defaultValue: 'aws-sling-dev', description: 'Aws KeyPair name for EC2 instances'),
    string(name: 'AwsSubnet', defaultValue: 'subnet-4406021d', description: 'AWS Subnet to create EC2 instances'),
    string(name: 'AwsSecurityGroups', defaultValue: 'sg-7ea9ef35', description: 'AWS VPC Security Groups to use'),
    string(name: 'AwsUsePublicIp', defaultValue: 'Yes', description: 'AWS EC2 has public IP or not'),
    string(name: 'MdRepo', defaultValue: 'http://folio-registry.aws.indexdata.com', description: 'Module descriptor repository'),
    string(name: 'StableFolio', defaultValue: 'https://folio-snapshot.dev.folio.org', description: 'Use stable version of modules'),
    string(name: 'FixedOkapi', defaultValue: '', description: 'Use specified version of Okapi'),
    text(name: 'FixedMods', defaultValue: '', description: 'Paste install.json content here to use predefined module versions rather than pulling from stable FOLIO site'),
    string(name: 'SampleDataRepo', defaultValue: 'https://s3.amazonaws.com/folio-public-sample-data', description: 'Sample data repository'),
    string(name: 'SampleDataName', defaultValue: 'perf', description: 'Sample dataset name'),
    string(name: 'TestRailUrl', defaultValue: 'https://foliotest.testrail.io', description: 'TestRail reporitng server URL'),
    string(name: 'TestRailProjectId', defaultValue: '19', description: 'TestRail Project ID for Intgegration tests'),
  ])
])

def sharedLib
def context


node('jenkins-agent-java11') {
  timeout(180) {

    stage("Checkout") {
      cleanWs()
      checkout scm
      sharedLib = load "shared.groovy"
      context = sharedLib.getContext()
    }

    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${context.awsKeyId}",
      accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
      usernamePassword(credentialsId: 'ebsco-rmapi-up', passwordVariable: 'RMAPI_PASSWORD',
      usernameVariable: 'RMAPI_CUSTID')]) {
      sshagent(credentials:["${context.sshKeyId}"]) {

        try {

//          stage("Create Environment") {
//            sharedLib.createEnv(context)
//          }

//          stage("Wait for Environment") {
//          sharedLib.waitForEnv(context)
//          }

//          stage("Bootstrap DB") {
//            sharedLib.bootstrapDb(context)
//          }

//          stage("Bootstrap Okapi") {
//            sharedLib.bootstrapOkapi(context)
//          }

//          stage("Bootstrap modules") {
//            sharedLib.bootstrapModules(context)
//          }

//          stage("Populate data") {
//            sharedLib.populateData(context)
//          }

          stage("Run API tests") {
            node('jenkins-slave-all') {
              echo "Checkout folio-api-tests"
              checkout([
                $class: 'GitSCM',
                branches: [[name: '*/master']],
                extensions: scm.extensions + [[$class: 'SubmoduleOption',
                                               disableSubmodules: false,
                                               parentCredentials: false,
                                               recursiveSubmodules: true,
                                               reference: '',
                                               trackingSubmodules: false],
                                              [$class: 'RelativeTargetDirectory',
                                               relativeTargetDir: 'folio-api-tests']],
                userRemoteConfigs: [[url: 'https://github.com/folio-org/folio-api-tests.git']]
              ])

              echo "Run all folio-api-tests"
              dir("${env.WORKSPACE}/folio-api-tests") {
//                withMaven(
//                  jdk: 'openjdk-8-jenkins-slave-all',
//                  maven: 'maven3-jenkins-slave-all',
//                  mavenSettingsConfig: 'folioci-maven-settings'
//                ) {
                withDockerContainer(image: 'postman/newman') {

                  def okapiDns = "ec2-" + context.okapiIp.replaceAll(/\./, "-") + ".compute-1.amazonaws.com"
                  //withCredentials([usernamePassword(credentialsId: 'testrail-ut56', passwordVariable: 'testrail_password', usernameVariable: 'testrail_user')]) {
                  script {  
                    sh "newman run mod-notes/mod-notes.postman_collection.json -e environment/folio-vagrant.postman_environment --reporter-json-export results.json --reporters cli,json"
                  }
                  cucumber buildStatus: 'UNSTABLE',  reportTitle: 'API tests report',  fileIncludePattern: '**/*.json', trendsLimit: 10
                }
              }
            }
          }
        } finally {
          stage("Tear down environment") {
          //  sleep 60
          //  sharedLib.teardownEnv(context)
          }
        }
      }
    }
  }
}
